import os
import sys
from androguard.misc import AnalyzeAPK
from androguard.core.bytecodes.dvm import DalvikVMFormat
from androguard.core.analysis.analysis import Analysis
from androguard.core.analysis.analysis import is_ascii_obfuscation
from androguard.core.bytecodes.apk import APK
from androguard.core.analysis import analysis
from androguard.core.bytecodes import dvm
from androguard.core.analysis.analysis import ExternalMethod
import csv
import time
from const import API_CALLS, PERMISSIONS, RESULT_PARAMS, DB_REGEX , API_ClASS 
from const2 import API_SYSTEM_COMMANDS 
from GroupAPI import GroupAPIChecker, APIGROUPS

#инициализации определения групп API
GroupAPI_Checker=GroupAPIChecker()
result_folder= "testResult"+"/"
APKpath = "testAPK" + '/'
if not os.path.exists(result_folder):
    os.mkdir(result_folder)

def load_file(filename):
    with open(filename, 'rb') as text_file:
        lines = text_file.readlines()
    return lines

def read_system_commands(list_smali_strings, api_system_commands):
    # System commands
    list_system_commands = []
    for elem in filter(None, list_smali_strings):
        command_to_check_list = elem.split(' ')
        for i in command_to_check_list:
            if  i in api_system_commands:
                list_system_commands.append(i)

    return list_system_commands


def api_check(folder,APKname):
    if os.path.exists(result_folder + folder + APKname + 'data/'):
        print(APKname+" Already scanned")
        return

    print("Starting apk:"+APKname)

    apk_start_time=time.time()
   

    RESULTdict = dict.fromkeys(RESULT_PARAMS,0) 

##отдельные словари для фич
    OtherDict=dict.fromkeys(('obfuscation','database'),0)

    APIdict = dict.fromkeys((API_CALLS+API_ClASS),0) 

    permission_dict=  dict.fromkeys(PERMISSIONS,0)

    strings_dict = dict.fromkeys(API_SYSTEM_COMMANDS,0)

    groupAPI_dict=dict.fromkeys(APIGROUPS,0)
##№№№


    #a-APK d[0]-DalvikVMFormat dx-Analysis
    try: 
        a,d,dx = AnalyzeAPK(folder+APKname)
    except:
        print(" ERROR: Androguard parse error, skipping file")
        return

###
    temp= a.get_details_permissions()
    temp2= a.get_declared_permissions_details()
    temp3 = a.get_uses_implied_permission_list()

# ########TODO почитать про использование пермишинсов без запросов

            

####

    RESULTdict["APP_Name"]=APKname
    RESULTdict['folder']=folder
    #methods = []

    
    #подозрительные строки
    RESULTdict["warn_strings"] =[]
    strings=dx.get_strings_analysis()
    #w=d[0].get_strings()
    list_system_commands = read_system_commands(strings, API_SYSTEM_COMMANDS)
    for i in list_system_commands:
        #print(i)
        RESULTdict["warn_strings"].append(i)

    for i in list_system_commands:
        strings_dict[i]+=1


    ### общая информация 
    RESULTdict['permissions'] = a.get_permissions()
    RESULTdict['activities'] = a.get_activities()
    RESULTdict['providers'] = a.get_providers()
    RESULTdict['services'] = a.get_services()
    RESULTdict['libraries'] = a.get_libraries()
    RESULTdict['is_obfuscation'] = 1 if is_ascii_obfuscation(d[0]) else 0
    RESULTdict['is_database'] = 1 if d[0].get_regex_strings(DB_REGEX) else 0
    #TODO intents_analysis from new.py

    OtherDict['obfuscation']=RESULTdict['is_obfuscation']
    OtherDict['database']=RESULTdict['is_database']

    #permissions
    RESULTdict['warn_permissions'] =[]

   #RESULTdict['feature_vectors']['permissions'] = []
    for permission in PERMISSIONS:

        if permission in RESULTdict['permissions']:
            RESULTdict['warn_permissions'].append(permission) 
            permission_dict[permission]=1


###########################################################################
#TODO подсчет групп АПИ и системных команд для вектора фич
###########################################################################

    #API 
    RESULTdict['API_groups']=[]
    external_classes = dx.get_external_classes()
    for i in external_classes:
        class_name = i.get_vm_class()
        methods_list = class_name.get_methods()
        for method in methods_list:
            a = '%s' % method.get_class_name().replace(';','')
            b = '%s' % method.get_name()
            c = '%s' % method.get_descriptor()
            #TODO permission_api_name https://androguard.readthedocs.io/en/latest/api/androguard.core.analysis.html?highlight=permission#androguard.core.analysis.analysis.ExternalMethod.permission_api_name 
            if b in API_CALLS:
                APIdict[b]+=1
                ###TODO !!!нужна нормализация данных
            if a in API_ClASS:
                APIdict[a]+=1

            temp=GroupAPI_Checker.checkAPIGroup(a.replace('/','.')[1:] ,b)
            if(temp!=None):
                groupAPI_dict[temp]+=1
                RESULTdict['API_groups'].append(temp)

##запись общих параметров
    with open(result_folder + 'API_CALLS.csv', 'a', encoding='utf8') as csvfile:
        fieldnames=(('APP_Name','folder')+API_CALLS+API_ClASS)
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
        #writer.writeheader()
        tempDict=APIdict.copy()
        tempDict['APP_Name']=APKname
        tempDict['folder']=folder
        writer.writerow(tempDict)

    with open(result_folder + 'OtherDict.csv', 'a', encoding='utf8') as csvfile:
        fieldnames='APP_Name','folder','obfuscation','database'
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
        #writer.writeheader()
        tempDict=OtherDict.copy()
        tempDict['APP_Name']=APKname
        tempDict['folder']=folder
        writer.writerow(tempDict)

    with open(result_folder + 'permission_dict.csv', 'a', encoding='utf8') as csvfile:
        fieldnames=('APP_Name','folder')+PERMISSIONS
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
        #writer.writeheader()
        tempDict=permission_dict.copy()
        tempDict['APP_Name']=APKname
        tempDict['folder']=folder
        writer.writerow(tempDict)

    with open(result_folder + 'strings_dict.csv', 'a', encoding='utf8') as csvfile:
        fieldnames=('APP_Name','folder')+API_SYSTEM_COMMANDS
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
        #writer.writeheader()
        tempDict=strings_dict.copy()
        tempDict['APP_Name']=APKname
        tempDict['folder']=folder
        writer.writerow(tempDict)

    with open(result_folder + 'groupAPI_dict.csv', 'a', encoding='utf8') as csvfile:
        fieldnames=('APP_Name','folder')+APIGROUPS
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
        #writer.writeheader()
        tempDict=groupAPI_dict.copy()
        tempDict['APP_Name']=APKname
        tempDict['folder']=folder
        writer.writerow(tempDict)
  

    with open(result_folder + 'RESULTdict.csv', 'a', encoding='utf8') as csvfile:
        fieldnames=RESULT_PARAMS
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
        #writer.writeheader()
        writer.writerow(RESULTdict)
    
##запись параметров данного приложения
    try:
        if os.path.exists(result_folder + folder):
            os.mkdir(result_folder+folder+APKname+'data')
        else:
            os.mkdir(result_folder+folder)
            os.mkdir(result_folder+folder+APKname+'data')
    except OSError:
        print ("Создать директорию %s не удалось" % (result_folder+folder+APKname+'data'))
    else:
        with open(result_folder + folder + APKname + 'data/RESULT.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=RESULT_PARAMS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()
            writer.writerow(RESULTdict)
        
        with open(result_folder + folder + APKname + 'data/OtherDict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames='obfuscation','database'
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()
            writer.writerow(OtherDict)

        with open(result_folder + folder + APKname + 'data/APIdict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=API_CALLS+API_ClASS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()
            writer.writerow(APIdict)

        with open(result_folder + folder + APKname + 'data/permission_dict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=PERMISSIONS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()
            writer.writerow(permission_dict)

        with open(result_folder + folder + APKname + 'data/strings_dict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=API_SYSTEM_COMMANDS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()
            writer.writerow(strings_dict)      

        with open(result_folder + folder + APKname + 'data/groupAPI_dict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=APIGROUPS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()
            writer.writerow(groupAPI_dict)   

    print("APK done:{} ".format(time.time() - apk_start_time))



def main():
    #################### main
    start_time = time.time()

        ## подготовка общих файлов
    if not os.path.exists(result_folder + 'RESULTdict.csv'):
        with open(result_folder + 'RESULTdict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=RESULT_PARAMS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()

    if not os.path.exists(result_folder + 'API_CALLS.csv'):
        with open(result_folder + 'API_CALLS.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=(('APP_Name','folder')+API_CALLS+API_ClASS)
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()

    if not os.path.exists(result_folder + 'OtherDict.csv'):
        with open(result_folder + 'OtherDict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames='APP_Name','folder','obfuscation','database'
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()

    if not os.path.exists(result_folder + 'permission_dict.csv'):
        with open(result_folder + 'permission_dict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=('APP_Name','folder')+PERMISSIONS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()

    if not os.path.exists(result_folder + 'strings_dict.csv'):
        with open(result_folder + 'strings_dict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=('APP_Name','folder')+API_SYSTEM_COMMANDS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()

    if not os.path.exists(result_folder + 'groupAPI_dict.csv'):
        with open(result_folder + 'groupAPI_dict.csv', 'w', encoding='utf8') as csvfile:
            fieldnames=('APP_Name','folder')+APIGROUPS
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames,delimiter=";",lineterminator="\n")
            writer.writeheader()



    #проход папок с файлами

    files = os.listdir(APKpath)

    APKs = filter(lambda x: x.endswith(('.apk','.apkk')), files)
    for apk in APKs:
            api_check(APKpath,apk)
    print("All DONE:{} ".format(time.time() - start_time))

main()